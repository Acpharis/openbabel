# This file was automatically generated by SWIG
package openbabel;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
package openbabelc;
bootstrap openbabel;
package openbabel;
@EXPORT = qw( );

# ---------- BASE METHODS -------------

package openbabel;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package openbabel;

*tokenize = *openbabelc::tokenize;
*ThrowError = *openbabelc::ThrowError;
*CartesianToInternal = *openbabelc::CartesianToInternal;
*InternalToCartesian = *openbabelc::InternalToCartesian;
*NewExtension = *openbabelc::NewExtension;
*get_rmat = *openbabelc::get_rmat;
*ob_make_rmat = *openbabelc::ob_make_rmat;
*qtrfit = *openbabelc::qtrfit;
*superimpose = *openbabelc::superimpose;

############# Class : openbabel::OBFormat ##############

package openbabel::OBFormat;
@ISA = qw( openbabel );
%OWNER = ();
%ITERATORS = ();
*ReadMolecule = *openbabelc::OBFormat_ReadMolecule;
*ReadChemObject = *openbabelc::OBFormat_ReadChemObject;
*WriteMolecule = *openbabelc::OBFormat_WriteMolecule;
*WriteChemObject = *openbabelc::OBFormat_WriteChemObject;
*Description = *openbabelc::OBFormat_Description;
*TargetClassDescription = *openbabelc::OBFormat_TargetClassDescription;
*GetType = *openbabelc::OBFormat_GetType;
*SpecificationURL = *openbabelc::OBFormat_SpecificationURL;
*GetMIMEType = *openbabelc::OBFormat_GetMIMEType;
*Flags = *openbabelc::OBFormat_Flags;
*SkipObjects = *openbabelc::OBFormat_SkipObjects;
*MakeNewInstance = *openbabelc::OBFormat_MakeNewInstance;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openbabelc::delete_OBFormat($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openbabel::CharPtrLess ##############

package openbabel::CharPtrLess;
@ISA = qw( openbabel );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openbabelc::new_CharPtrLess(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openbabelc::delete_CharPtrLess($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openbabel::OBConversion ##############

package openbabel::OBConversion;
@ISA = qw( openbabel );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openbabelc::new_OBConversion(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openbabelc::delete_OBConversion($self);
        delete $OWNER{$self};
    }
}

*RegisterFormat = *openbabelc::OBConversion_RegisterFormat;
*FindFormat = *openbabelc::OBConversion_FindFormat;
*FormatFromExt = *openbabelc::OBConversion_FormatFromExt;
*FormatFromMIME = *openbabelc::OBConversion_FormatFromMIME;
*GetNextFormat = *openbabelc::OBConversion_GetNextFormat;
*Description = *openbabelc::OBConversion_Description;
*GetInStream = *openbabelc::OBConversion_GetInStream;
*GetOutStream = *openbabelc::OBConversion_GetOutStream;
*SetInStream = *openbabelc::OBConversion_SetInStream;
*SetOutStream = *openbabelc::OBConversion_SetOutStream;
*SetInAndOutFormats = *openbabelc::OBConversion_SetInAndOutFormats;
*SetInFormat = *openbabelc::OBConversion_SetInFormat;
*SetOutFormat = *openbabelc::OBConversion_SetOutFormat;
*GetInFormat = *openbabelc::OBConversion_GetInFormat;
*GetOutFormat = *openbabelc::OBConversion_GetOutFormat;
*GetInFilename = *openbabelc::OBConversion_GetInFilename;
*GetInPos = *openbabelc::OBConversion_GetInPos;
*GetOptions = *openbabelc::OBConversion_GetOptions;
*SetOptions = *openbabelc::OBConversion_SetOptions;
*GetGeneralOptions = *openbabelc::OBConversion_GetGeneralOptions;
*SetGeneralOptions = *openbabelc::OBConversion_SetGeneralOptions;
*GetTitle = *openbabelc::OBConversion_GetTitle;
*SaveOptionsToFile = *openbabelc::OBConversion_SaveOptionsToFile;
*RestoreOptionsFromFile = *openbabelc::OBConversion_RestoreOptionsFromFile;
*Convert = *openbabelc::OBConversion_Convert;
*FullConvert = *openbabelc::OBConversion_FullConvert;
*AddChemObject = *openbabelc::OBConversion_AddChemObject;
*GetChemObject = *openbabelc::OBConversion_GetChemObject;
*IsLast = *openbabelc::OBConversion_IsLast;
*IsFirstInput = *openbabelc::OBConversion_IsFirstInput;
*GetOutputIndex = *openbabelc::OBConversion_GetOutputIndex;
*SetOutputIndex = *openbabelc::OBConversion_SetOutputIndex;
*SetMoreFilesToCome = *openbabelc::OBConversion_SetMoreFilesToCome;
*SetOneObjectOnly = *openbabelc::OBConversion_SetOneObjectOnly;
*GetDefaultFormat = *openbabelc::OBConversion_GetDefaultFormat;
*Write = *openbabelc::OBConversion_Write;
*BatchFileName = *openbabelc::OBConversion_BatchFileName;
*IncrementedFileName = *openbabelc::OBConversion_IncrementedFileName;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openbabel::OBResidue ##############

package openbabel::OBResidue;
@ISA = qw( openbabel );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openbabelc::new_OBResidue(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openbabelc::delete_OBResidue($self);
        delete $OWNER{$self};
    }
}

*AddAtom = *openbabelc::OBResidue_AddAtom;
*InsertAtom = *openbabelc::OBResidue_InsertAtom;
*RemoveAtom = *openbabelc::OBResidue_RemoveAtom;
*Clear = *openbabelc::OBResidue_Clear;
*SetName = *openbabelc::OBResidue_SetName;
*SetNum = *openbabelc::OBResidue_SetNum;
*SetChain = *openbabelc::OBResidue_SetChain;
*SetChainNum = *openbabelc::OBResidue_SetChainNum;
*SetIdx = *openbabelc::OBResidue_SetIdx;
*SetAtomID = *openbabelc::OBResidue_SetAtomID;
*SetHetAtom = *openbabelc::OBResidue_SetHetAtom;
*SetSerialNum = *openbabelc::OBResidue_SetSerialNum;
*GetName = *openbabelc::OBResidue_GetName;
*GetNum = *openbabelc::OBResidue_GetNum;
*GetNumAtoms = *openbabelc::OBResidue_GetNumAtoms;
*GetChain = *openbabelc::OBResidue_GetChain;
*GetChainNum = *openbabelc::OBResidue_GetChainNum;
*GetIdx = *openbabelc::OBResidue_GetIdx;
*GetResKey = *openbabelc::OBResidue_GetResKey;
*GetAtoms = *openbabelc::OBResidue_GetAtoms;
*GetBonds = *openbabelc::OBResidue_GetBonds;
*GetAtomID = *openbabelc::OBResidue_GetAtomID;
*GetSerialNum = *openbabelc::OBResidue_GetSerialNum;
*GetAminoAcidProperty = *openbabelc::OBResidue_GetAminoAcidProperty;
*GetAtomProperty = *openbabelc::OBResidue_GetAtomProperty;
*GetResidueProperty = *openbabelc::OBResidue_GetResidueProperty;
*IsHetAtom = *openbabelc::OBResidue_IsHetAtom;
*IsResidueType = *openbabelc::OBResidue_IsResidueType;
*BeginAtom = *openbabelc::OBResidue_BeginAtom;
*NextAtom = *openbabelc::OBResidue_NextAtom;
*HasData = *openbabelc::OBResidue_HasData;
*DeleteData = *openbabelc::OBResidue_DeleteData;
*SetData = *openbabelc::OBResidue_SetData;
*DataSize = *openbabelc::OBResidue_DataSize;
*GetData = *openbabelc::OBResidue_GetData;
*BeginData = *openbabelc::OBResidue_BeginData;
*EndData = *openbabelc::OBResidue_EndData;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openbabel::OBAtom ##############

package openbabel::OBAtom;
@ISA = qw( openbabel );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openbabelc::new_OBAtom(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openbabelc::delete_OBAtom($self);
        delete $OWNER{$self};
    }
}

*Clear = *openbabelc::OBAtom_Clear;
*SetIdx = *openbabelc::OBAtom_SetIdx;
*SetHyb = *openbabelc::OBAtom_SetHyb;
*SetAtomicNum = *openbabelc::OBAtom_SetAtomicNum;
*SetIsotope = *openbabelc::OBAtom_SetIsotope;
*SetImplicitValence = *openbabelc::OBAtom_SetImplicitValence;
*IncrementImplicitValence = *openbabelc::OBAtom_IncrementImplicitValence;
*DecrementImplicitValence = *openbabelc::OBAtom_DecrementImplicitValence;
*SetFormalCharge = *openbabelc::OBAtom_SetFormalCharge;
*SetSpinMultiplicity = *openbabelc::OBAtom_SetSpinMultiplicity;
*SetType = *openbabelc::OBAtom_SetType;
*SetPartialCharge = *openbabelc::OBAtom_SetPartialCharge;
*SetVector = *openbabelc::OBAtom_SetVector;
*SetResidue = *openbabelc::OBAtom_SetResidue;
*SetCoordPtr = *openbabelc::OBAtom_SetCoordPtr;
*SetAromatic = *openbabelc::OBAtom_SetAromatic;
*UnsetAromatic = *openbabelc::OBAtom_UnsetAromatic;
*SetClockwiseStereo = *openbabelc::OBAtom_SetClockwiseStereo;
*SetAntiClockwiseStereo = *openbabelc::OBAtom_SetAntiClockwiseStereo;
*SetPositiveStereo = *openbabelc::OBAtom_SetPositiveStereo;
*SetNegativeStereo = *openbabelc::OBAtom_SetNegativeStereo;
*UnsetStereo = *openbabelc::OBAtom_UnsetStereo;
*SetInRing = *openbabelc::OBAtom_SetInRing;
*SetChiral = *openbabelc::OBAtom_SetChiral;
*ClearCoordPtr = *openbabelc::OBAtom_ClearCoordPtr;
*GetFormalCharge = *openbabelc::OBAtom_GetFormalCharge;
*GetAtomicNum = *openbabelc::OBAtom_GetAtomicNum;
*GetIsotope = *openbabelc::OBAtom_GetIsotope;
*GetSpinMultiplicity = *openbabelc::OBAtom_GetSpinMultiplicity;
*GetAtomicMass = *openbabelc::OBAtom_GetAtomicMass;
*GetExactMass = *openbabelc::OBAtom_GetExactMass;
*GetIdx = *openbabelc::OBAtom_GetIdx;
*GetCoordinateIdx = *openbabelc::OBAtom_GetCoordinateIdx;
*GetCIdx = *openbabelc::OBAtom_GetCIdx;
*GetValence = *openbabelc::OBAtom_GetValence;
*GetHyb = *openbabelc::OBAtom_GetHyb;
*GetImplicitValence = *openbabelc::OBAtom_GetImplicitValence;
*GetHvyValence = *openbabelc::OBAtom_GetHvyValence;
*GetHeteroValence = *openbabelc::OBAtom_GetHeteroValence;
*GetType = *openbabelc::OBAtom_GetType;
*GetX = *openbabelc::OBAtom_GetX;
*x = *openbabelc::OBAtom_x;
*GetY = *openbabelc::OBAtom_GetY;
*y = *openbabelc::OBAtom_y;
*GetZ = *openbabelc::OBAtom_GetZ;
*z = *openbabelc::OBAtom_z;
*GetCoordinate = *openbabelc::OBAtom_GetCoordinate;
*GetVector = *openbabelc::OBAtom_GetVector;
*GetPartialCharge = *openbabelc::OBAtom_GetPartialCharge;
*GetResidue = *openbabelc::OBAtom_GetResidue;
*GetNewBondVector = *openbabelc::OBAtom_GetNewBondVector;
*GetBond = *openbabelc::OBAtom_GetBond;
*GetNextAtom = *openbabelc::OBAtom_GetNextAtom;
*BeginBonds = *openbabelc::OBAtom_BeginBonds;
*EndBonds = *openbabelc::OBAtom_EndBonds;
*BeginBond = *openbabelc::OBAtom_BeginBond;
*NextBond = *openbabelc::OBAtom_NextBond;
*BeginNbrAtom = *openbabelc::OBAtom_BeginNbrAtom;
*NextNbrAtom = *openbabelc::OBAtom_NextNbrAtom;
*GetDistance = *openbabelc::OBAtom_GetDistance;
*GetAngle = *openbabelc::OBAtom_GetAngle;
*NewResidue = *openbabelc::OBAtom_NewResidue;
*DeleteResidue = *openbabelc::OBAtom_DeleteResidue;
*AddBond = *openbabelc::OBAtom_AddBond;
*InsertBond = *openbabelc::OBAtom_InsertBond;
*DeleteBond = *openbabelc::OBAtom_DeleteBond;
*CountFreeOxygens = *openbabelc::OBAtom_CountFreeOxygens;
*ImplicitHydrogenCount = *openbabelc::OBAtom_ImplicitHydrogenCount;
*ExplicitHydrogenCount = *openbabelc::OBAtom_ExplicitHydrogenCount;
*MemberOfRingCount = *openbabelc::OBAtom_MemberOfRingCount;
*MemberOfRingSize = *openbabelc::OBAtom_MemberOfRingSize;
*SmallestBondAngle = *openbabelc::OBAtom_SmallestBondAngle;
*AverageBondAngle = *openbabelc::OBAtom_AverageBondAngle;
*BOSum = *openbabelc::OBAtom_BOSum;
*KBOSum = *openbabelc::OBAtom_KBOSum;
*HtoMethyl = *openbabelc::OBAtom_HtoMethyl;
*SetHybAndGeom = *openbabelc::OBAtom_SetHybAndGeom;
*HasResidue = *openbabelc::OBAtom_HasResidue;
*IsHydrogen = *openbabelc::OBAtom_IsHydrogen;
*IsCarbon = *openbabelc::OBAtom_IsCarbon;
*IsNitrogen = *openbabelc::OBAtom_IsNitrogen;
*IsOxygen = *openbabelc::OBAtom_IsOxygen;
*IsSulfur = *openbabelc::OBAtom_IsSulfur;
*IsPhosphorus = *openbabelc::OBAtom_IsPhosphorus;
*IsAromatic = *openbabelc::OBAtom_IsAromatic;
*IsInRing = *openbabelc::OBAtom_IsInRing;
*IsInRingSize = *openbabelc::OBAtom_IsInRingSize;
*IsHeteroatom = *openbabelc::OBAtom_IsHeteroatom;
*IsNotCorH = *openbabelc::OBAtom_IsNotCorH;
*IsConnected = *openbabelc::OBAtom_IsConnected;
*IsOneThree = *openbabelc::OBAtom_IsOneThree;
*IsOneFour = *openbabelc::OBAtom_IsOneFour;
*IsCarboxylOxygen = *openbabelc::OBAtom_IsCarboxylOxygen;
*IsPhosphateOxygen = *openbabelc::OBAtom_IsPhosphateOxygen;
*IsSulfateOxygen = *openbabelc::OBAtom_IsSulfateOxygen;
*IsNitroOxygen = *openbabelc::OBAtom_IsNitroOxygen;
*IsAmideNitrogen = *openbabelc::OBAtom_IsAmideNitrogen;
*IsPolarHydrogen = *openbabelc::OBAtom_IsPolarHydrogen;
*IsNonPolarHydrogen = *openbabelc::OBAtom_IsNonPolarHydrogen;
*IsAromaticNOxide = *openbabelc::OBAtom_IsAromaticNOxide;
*IsChiral = *openbabelc::OBAtom_IsChiral;
*IsAxial = *openbabelc::OBAtom_IsAxial;
*IsClockwise = *openbabelc::OBAtom_IsClockwise;
*IsAntiClockwise = *openbabelc::OBAtom_IsAntiClockwise;
*IsPositiveStereo = *openbabelc::OBAtom_IsPositiveStereo;
*IsNegativeStereo = *openbabelc::OBAtom_IsNegativeStereo;
*HasChiralitySpecified = *openbabelc::OBAtom_HasChiralitySpecified;
*HasChiralVolume = *openbabelc::OBAtom_HasChiralVolume;
*HasAlphaBetaUnsat = *openbabelc::OBAtom_HasAlphaBetaUnsat;
*HasBondOfOrder = *openbabelc::OBAtom_HasBondOfOrder;
*CountBondsOfOrder = *openbabelc::OBAtom_CountBondsOfOrder;
*HasNonSingleBond = *openbabelc::OBAtom_HasNonSingleBond;
*HasSingleBond = *openbabelc::OBAtom_HasSingleBond;
*HasDoubleBond = *openbabelc::OBAtom_HasDoubleBond;
*HasAromaticBond = *openbabelc::OBAtom_HasAromaticBond;
*MatchesSMARTS = *openbabelc::OBAtom_MatchesSMARTS;
*HasData = *openbabelc::OBAtom_HasData;
*DeleteData = *openbabelc::OBAtom_DeleteData;
*SetData = *openbabelc::OBAtom_SetData;
*DataSize = *openbabelc::OBAtom_DataSize;
*GetData = *openbabelc::OBAtom_GetData;
*BeginData = *openbabelc::OBAtom_BeginData;
*EndData = *openbabelc::OBAtom_EndData;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openbabel::OBBond ##############

package openbabel::OBBond;
@ISA = qw( openbabel );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openbabelc::new_OBBond(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openbabelc::delete_OBBond($self);
        delete $OWNER{$self};
    }
}

*SetIdx = *openbabelc::OBBond_SetIdx;
*SetBO = *openbabelc::OBBond_SetBO;
*SetBegin = *openbabelc::OBBond_SetBegin;
*SetEnd = *openbabelc::OBBond_SetEnd;
*SetLength = *openbabelc::OBBond_SetLength;
*Set = *openbabelc::OBBond_Set;
*SetKSingle = *openbabelc::OBBond_SetKSingle;
*SetKDouble = *openbabelc::OBBond_SetKDouble;
*SetKTriple = *openbabelc::OBBond_SetKTriple;
*SetAromatic = *openbabelc::OBBond_SetAromatic;
*SetHash = *openbabelc::OBBond_SetHash;
*SetWedge = *openbabelc::OBBond_SetWedge;
*SetUp = *openbabelc::OBBond_SetUp;
*SetDown = *openbabelc::OBBond_SetDown;
*SetInRing = *openbabelc::OBBond_SetInRing;
*SetClosure = *openbabelc::OBBond_SetClosure;
*UnsetAromatic = *openbabelc::OBBond_UnsetAromatic;
*UnsetKekule = *openbabelc::OBBond_UnsetKekule;
*GetBO = *openbabelc::OBBond_GetBO;
*GetBondOrder = *openbabelc::OBBond_GetBondOrder;
*GetFlags = *openbabelc::OBBond_GetFlags;
*GetBeginAtomIdx = *openbabelc::OBBond_GetBeginAtomIdx;
*GetEndAtomIdx = *openbabelc::OBBond_GetEndAtomIdx;
*GetBeginAtom = *openbabelc::OBBond_GetBeginAtom;
*GetEndAtom = *openbabelc::OBBond_GetEndAtom;
*GetNbrAtom = *openbabelc::OBBond_GetNbrAtom;
*GetEquibLength = *openbabelc::OBBond_GetEquibLength;
*GetLength = *openbabelc::OBBond_GetLength;
*GetNbrAtomIdx = *openbabelc::OBBond_GetNbrAtomIdx;
*IsAromatic = *openbabelc::OBBond_IsAromatic;
*IsInRing = *openbabelc::OBBond_IsInRing;
*IsRotor = *openbabelc::OBBond_IsRotor;
*IsAmide = *openbabelc::OBBond_IsAmide;
*IsPrimaryAmide = *openbabelc::OBBond_IsPrimaryAmide;
*IsSecondaryAmide = *openbabelc::OBBond_IsSecondaryAmide;
*IsEster = *openbabelc::OBBond_IsEster;
*IsCarbonyl = *openbabelc::OBBond_IsCarbonyl;
*IsSingle = *openbabelc::OBBond_IsSingle;
*IsDouble = *openbabelc::OBBond_IsDouble;
*IsTriple = *openbabelc::OBBond_IsTriple;
*IsKSingle = *openbabelc::OBBond_IsKSingle;
*IsKDouble = *openbabelc::OBBond_IsKDouble;
*IsKTriple = *openbabelc::OBBond_IsKTriple;
*IsClosure = *openbabelc::OBBond_IsClosure;
*IsUp = *openbabelc::OBBond_IsUp;
*IsDown = *openbabelc::OBBond_IsDown;
*IsWedge = *openbabelc::OBBond_IsWedge;
*IsHash = *openbabelc::OBBond_IsHash;
*HasData = *openbabelc::OBBond_HasData;
*DeleteData = *openbabelc::OBBond_DeleteData;
*SetData = *openbabelc::OBBond_SetData;
*DataSize = *openbabelc::OBBond_DataSize;
*GetData = *openbabelc::OBBond_GetData;
*BeginData = *openbabelc::OBBond_BeginData;
*EndData = *openbabelc::OBBond_EndData;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openbabel::OBMol ##############

package openbabel::OBMol;
@ISA = qw( openbabel );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = openbabelc::new_OBMol(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openbabelc::delete_OBMol($self);
        delete $OWNER{$self};
    }
}

*ReserveAtoms = *openbabelc::OBMol_ReserveAtoms;
*CreateAtom = *openbabelc::OBMol_CreateAtom;
*CreateBond = *openbabelc::OBMol_CreateBond;
*DestroyAtom = *openbabelc::OBMol_DestroyAtom;
*DestroyBond = *openbabelc::OBMol_DestroyBond;
*AddAtom = *openbabelc::OBMol_AddAtom;
*AddBond = *openbabelc::OBMol_AddBond;
*AddResidue = *openbabelc::OBMol_AddResidue;
*InsertAtom = *openbabelc::OBMol_InsertAtom;
*DeleteAtom = *openbabelc::OBMol_DeleteAtom;
*DeleteBond = *openbabelc::OBMol_DeleteBond;
*DeleteResidue = *openbabelc::OBMol_DeleteResidue;
*NewAtom = *openbabelc::OBMol_NewAtom;
*NewResidue = *openbabelc::OBMol_NewResidue;
*BeginModify = *openbabelc::OBMol_BeginModify;
*EndModify = *openbabelc::OBMol_EndModify;
*GetMod = *openbabelc::OBMol_GetMod;
*IncrementMod = *openbabelc::OBMol_IncrementMod;
*DecrementMod = *openbabelc::OBMol_DecrementMod;
*HasData = *openbabelc::OBMol_HasData;
*DeleteData = *openbabelc::OBMol_DeleteData;
*SetData = *openbabelc::OBMol_SetData;
*DataSize = *openbabelc::OBMol_DataSize;
*GetData = *openbabelc::OBMol_GetData;
*BeginData = *openbabelc::OBMol_BeginData;
*EndData = *openbabelc::OBMol_EndData;
*GetFlags = *openbabelc::OBMol_GetFlags;
*GetTitle = *openbabelc::OBMol_GetTitle;
*NumAtoms = *openbabelc::OBMol_NumAtoms;
*NumBonds = *openbabelc::OBMol_NumBonds;
*NumHvyAtoms = *openbabelc::OBMol_NumHvyAtoms;
*NumResidues = *openbabelc::OBMol_NumResidues;
*NumRotors = *openbabelc::OBMol_NumRotors;
*GetAtom = *openbabelc::OBMol_GetAtom;
*GetFirstAtom = *openbabelc::OBMol_GetFirstAtom;
*GetBond = *openbabelc::OBMol_GetBond;
*GetResidue = *openbabelc::OBMol_GetResidue;
*GetInternalCoord = *openbabelc::OBMol_GetInternalCoord;
*GetTorsion = *openbabelc::OBMol_GetTorsion;
*GetFormula = *openbabelc::OBMol_GetFormula;
*GetEnergy = *openbabelc::OBMol_GetEnergy;
*GetMolWt = *openbabelc::OBMol_GetMolWt;
*GetExactMass = *openbabelc::OBMol_GetExactMass;
*GetTotalCharge = *openbabelc::OBMol_GetTotalCharge;
*GetTotalSpinMultiplicity = *openbabelc::OBMol_GetTotalSpinMultiplicity;
*GetDimension = *openbabelc::OBMol_GetDimension;
*GetCoordinates = *openbabelc::OBMol_GetCoordinates;
*GetSSSR = *openbabelc::OBMol_GetSSSR;
*AutomaticFormalCharge = *openbabelc::OBMol_AutomaticFormalCharge;
*AutomaticPartialCharge = *openbabelc::OBMol_AutomaticPartialCharge;
*SetTitle = *openbabelc::OBMol_SetTitle;
*SetFormula = *openbabelc::OBMol_SetFormula;
*SetEnergy = *openbabelc::OBMol_SetEnergy;
*SetDimension = *openbabelc::OBMol_SetDimension;
*SetTotalCharge = *openbabelc::OBMol_SetTotalCharge;
*SetTotalSpinMultiplicity = *openbabelc::OBMol_SetTotalSpinMultiplicity;
*SetInternalCoord = *openbabelc::OBMol_SetInternalCoord;
*SetAutomaticFormalCharge = *openbabelc::OBMol_SetAutomaticFormalCharge;
*SetAutomaticPartialCharge = *openbabelc::OBMol_SetAutomaticPartialCharge;
*SetAromaticPerceived = *openbabelc::OBMol_SetAromaticPerceived;
*SetSSSRPerceived = *openbabelc::OBMol_SetSSSRPerceived;
*SetRingAtomsAndBondsPerceived = *openbabelc::OBMol_SetRingAtomsAndBondsPerceived;
*SetAtomTypesPerceived = *openbabelc::OBMol_SetAtomTypesPerceived;
*SetChainsPerceived = *openbabelc::OBMol_SetChainsPerceived;
*SetChiralityPerceived = *openbabelc::OBMol_SetChiralityPerceived;
*SetPartialChargesPerceived = *openbabelc::OBMol_SetPartialChargesPerceived;
*SetHybridizationPerceived = *openbabelc::OBMol_SetHybridizationPerceived;
*SetImplicitValencePerceived = *openbabelc::OBMol_SetImplicitValencePerceived;
*SetKekulePerceived = *openbabelc::OBMol_SetKekulePerceived;
*SetClosureBondsPerceived = *openbabelc::OBMol_SetClosureBondsPerceived;
*SetHydrogensAdded = *openbabelc::OBMol_SetHydrogensAdded;
*SetCorrectedForPH = *openbabelc::OBMol_SetCorrectedForPH;
*SetAromaticCorrected = *openbabelc::OBMol_SetAromaticCorrected;
*SetSpinMultiplicityAssigned = *openbabelc::OBMol_SetSpinMultiplicityAssigned;
*UnsetAromaticPerceived = *openbabelc::OBMol_UnsetAromaticPerceived;
*UnsetPartialChargesPerceived = *openbabelc::OBMol_UnsetPartialChargesPerceived;
*UnsetImplicitValencePerceived = *openbabelc::OBMol_UnsetImplicitValencePerceived;
*UnsetFlag = *openbabelc::OBMol_UnsetFlag;
*SetFlags = *openbabelc::OBMol_SetFlags;
*DoTransformations = *openbabelc::OBMol_DoTransformations;
*ClassDescription = *openbabelc::OBMol_ClassDescription;
*Clear = *openbabelc::OBMol_Clear;
*RenumberAtoms = *openbabelc::OBMol_RenumberAtoms;
*ToInertialFrame = *openbabelc::OBMol_ToInertialFrame;
*Translate = *openbabelc::OBMol_Translate;
*Rotate = *openbabelc::OBMol_Rotate;
*Kekulize = *openbabelc::OBMol_Kekulize;
*PerceiveKekuleBonds = *openbabelc::OBMol_PerceiveKekuleBonds;
*NewPerceiveKekuleBonds = *openbabelc::OBMol_NewPerceiveKekuleBonds;
*start_kekulize = *openbabelc::OBMol_start_kekulize;
*expand_kekulize = *openbabelc::OBMol_expand_kekulize;
*getorden = *openbabelc::OBMol_getorden;
*expandcycle = *openbabelc::OBMol_expandcycle;
*DeleteHydrogen = *openbabelc::OBMol_DeleteHydrogen;
*DeleteHydrogens = *openbabelc::OBMol_DeleteHydrogens;
*DeleteNonPolarHydrogens = *openbabelc::OBMol_DeleteNonPolarHydrogens;
*AddHydrogens = *openbabelc::OBMol_AddHydrogens;
*AddPolarHydrogens = *openbabelc::OBMol_AddPolarHydrogens;
*StripSalts = *openbabelc::OBMol_StripSalts;
*CorrectForPH = *openbabelc::OBMol_CorrectForPH;
*AssignSpinMultiplicity = *openbabelc::OBMol_AssignSpinMultiplicity;
*Center = *openbabelc::OBMol_Center;
*SetTorsion = *openbabelc::OBMol_SetTorsion;
*FindSSSR = *openbabelc::OBMol_FindSSSR;
*FindRingAtomsAndBonds = *openbabelc::OBMol_FindRingAtomsAndBonds;
*FindChiralCenters = *openbabelc::OBMol_FindChiralCenters;
*FindChildren = *openbabelc::OBMol_FindChildren;
*FindLargestFragment = *openbabelc::OBMol_FindLargestFragment;
*ContigFragList = *openbabelc::OBMol_ContigFragList;
*Align = *openbabelc::OBMol_Align;
*ConnectTheDots = *openbabelc::OBMol_ConnectTheDots;
*PerceiveBondOrders = *openbabelc::OBMol_PerceiveBondOrders;
*FindTorsions = *openbabelc::OBMol_FindTorsions;
*GetGTDVector = *openbabelc::OBMol_GetGTDVector;
*GetGIVector = *openbabelc::OBMol_GetGIVector;
*GetGIDVector = *openbabelc::OBMol_GetGIDVector;
*Has2D = *openbabelc::OBMol_Has2D;
*Has3D = *openbabelc::OBMol_Has3D;
*HasNonZeroCoords = *openbabelc::OBMol_HasNonZeroCoords;
*HasAromaticPerceived = *openbabelc::OBMol_HasAromaticPerceived;
*HasSSSRPerceived = *openbabelc::OBMol_HasSSSRPerceived;
*HasRingAtomsAndBondsPerceived = *openbabelc::OBMol_HasRingAtomsAndBondsPerceived;
*HasAtomTypesPerceived = *openbabelc::OBMol_HasAtomTypesPerceived;
*HasChiralityPerceived = *openbabelc::OBMol_HasChiralityPerceived;
*HasPartialChargesPerceived = *openbabelc::OBMol_HasPartialChargesPerceived;
*HasHybridizationPerceived = *openbabelc::OBMol_HasHybridizationPerceived;
*HasImplicitValencePerceived = *openbabelc::OBMol_HasImplicitValencePerceived;
*HasKekulePerceived = *openbabelc::OBMol_HasKekulePerceived;
*HasClosureBondsPerceived = *openbabelc::OBMol_HasClosureBondsPerceived;
*HasChainsPerceived = *openbabelc::OBMol_HasChainsPerceived;
*HasHydrogensAdded = *openbabelc::OBMol_HasHydrogensAdded;
*HasAromaticCorrected = *openbabelc::OBMol_HasAromaticCorrected;
*IsCorrectedForPH = *openbabelc::OBMol_IsCorrectedForPH;
*HasSpinMultiplicityAssigned = *openbabelc::OBMol_HasSpinMultiplicityAssigned;
*IsChiral = *openbabelc::OBMol_IsChiral;
*Empty = *openbabelc::OBMol_Empty;
*BeginAtom = *openbabelc::OBMol_BeginAtom;
*NextAtom = *openbabelc::OBMol_NextAtom;
*BeginBond = *openbabelc::OBMol_BeginBond;
*NextBond = *openbabelc::OBMol_NextBond;
*BeginResidue = *openbabelc::OBMol_BeginResidue;
*NextResidue = *openbabelc::OBMol_NextResidue;
*BeginInternalCoord = *openbabelc::OBMol_BeginInternalCoord;
*NextInternalCoord = *openbabelc::OBMol_NextInternalCoord;
*NumConformers = *openbabelc::OBMol_NumConformers;
*SetConformers = *openbabelc::OBMol_SetConformers;
*AddConformer = *openbabelc::OBMol_AddConformer;
*SetConformer = *openbabelc::OBMol_SetConformer;
*CopyConformer = *openbabelc::OBMol_CopyConformer;
*DeleteConformer = *openbabelc::OBMol_DeleteConformer;
*GetConformer = *openbabelc::OBMol_GetConformer;
*GetConformers = *openbabelc::OBMol_GetConformers;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : openbabel::OBInternalCoord ##############

package openbabel::OBInternalCoord;
@ISA = qw( openbabel );
%OWNER = ();
%ITERATORS = ();
*swig__a_get = *openbabelc::OBInternalCoord__a_get;
*swig__a_set = *openbabelc::OBInternalCoord__a_set;
*swig__b_get = *openbabelc::OBInternalCoord__b_get;
*swig__b_set = *openbabelc::OBInternalCoord__b_set;
*swig__c_get = *openbabelc::OBInternalCoord__c_get;
*swig__c_set = *openbabelc::OBInternalCoord__c_set;
*swig__dst_get = *openbabelc::OBInternalCoord__dst_get;
*swig__dst_set = *openbabelc::OBInternalCoord__dst_set;
*swig__ang_get = *openbabelc::OBInternalCoord__ang_get;
*swig__ang_set = *openbabelc::OBInternalCoord__ang_set;
*swig__tor_get = *openbabelc::OBInternalCoord__tor_get;
*swig__tor_set = *openbabelc::OBInternalCoord__tor_set;
sub new {
    my $pkg = shift;
    my $self = openbabelc::new_OBInternalCoord(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        openbabelc::delete_OBInternalCoord($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package openbabel;

*NOTREADABLE = *openbabelc::NOTREADABLE;
*READONEONLY = *openbabelc::READONEONLY;
*READBINARY = *openbabelc::READBINARY;
*NOTWRITABLE = *openbabelc::NOTWRITABLE;
*WRITEONEONLY = *openbabelc::WRITEONEONLY;
*WRITEBINARY = *openbabelc::WRITEBINARY;
*DEFAULTFORMAT = *openbabelc::DEFAULTFORMAT;
*OB_4RING_ATOM = *openbabelc::OB_4RING_ATOM;
*OB_3RING_ATOM = *openbabelc::OB_3RING_ATOM;
*OB_AROMATIC_ATOM = *openbabelc::OB_AROMATIC_ATOM;
*OB_RING_ATOM = *openbabelc::OB_RING_ATOM;
*OB_CSTEREO_ATOM = *openbabelc::OB_CSTEREO_ATOM;
*OB_ACSTEREO_ATOM = *openbabelc::OB_ACSTEREO_ATOM;
*OB_DONOR_ATOM = *openbabelc::OB_DONOR_ATOM;
*OB_ACCEPTOR_ATOM = *openbabelc::OB_ACCEPTOR_ATOM;
*OB_CHIRAL_ATOM = *openbabelc::OB_CHIRAL_ATOM;
*OB_POS_CHIRAL_ATOM = *openbabelc::OB_POS_CHIRAL_ATOM;
*OB_NEG_CHIRAL_ATOM = *openbabelc::OB_NEG_CHIRAL_ATOM;
*OB_AROMATIC_BOND = *openbabelc::OB_AROMATIC_BOND;
*OB_WEDGE_BOND = *openbabelc::OB_WEDGE_BOND;
*OB_HASH_BOND = *openbabelc::OB_HASH_BOND;
*OB_RING_BOND = *openbabelc::OB_RING_BOND;
*OB_TORUP_BOND = *openbabelc::OB_TORUP_BOND;
*OB_TORDOWN_BOND = *openbabelc::OB_TORDOWN_BOND;
*OB_KSINGLE_BOND = *openbabelc::OB_KSINGLE_BOND;
*OB_KDOUBLE_BOND = *openbabelc::OB_KDOUBLE_BOND;
*OB_KTRIPLE_BOND = *openbabelc::OB_KTRIPLE_BOND;
*OB_CLOSURE_BOND = *openbabelc::OB_CLOSURE_BOND;
*OB_SSSR_MOL = *openbabelc::OB_SSSR_MOL;
*OB_RINGFLAGS_MOL = *openbabelc::OB_RINGFLAGS_MOL;
*OB_AROMATIC_MOL = *openbabelc::OB_AROMATIC_MOL;
*OB_ATOMTYPES_MOL = *openbabelc::OB_ATOMTYPES_MOL;
*OB_CHIRALITY_MOL = *openbabelc::OB_CHIRALITY_MOL;
*OB_PCHARGE_MOL = *openbabelc::OB_PCHARGE_MOL;
*OB_HYBRID_MOL = *openbabelc::OB_HYBRID_MOL;
*OB_IMPVAL_MOL = *openbabelc::OB_IMPVAL_MOL;
*OB_KEKULE_MOL = *openbabelc::OB_KEKULE_MOL;
*OB_CLOSURE_MOL = *openbabelc::OB_CLOSURE_MOL;
*OB_H_ADDED_MOL = *openbabelc::OB_H_ADDED_MOL;
*OB_PH_CORRECTED_MOL = *openbabelc::OB_PH_CORRECTED_MOL;
*OB_AROM_CORRECTED_MOL = *openbabelc::OB_AROM_CORRECTED_MOL;
*OB_CHAINS_MOL = *openbabelc::OB_CHAINS_MOL;
*OB_TCHARGE_MOL = *openbabelc::OB_TCHARGE_MOL;
*OB_TSPIN_MOL = *openbabelc::OB_TSPIN_MOL;
*OB_CURRENT_CONFORMER = *openbabelc::OB_CURRENT_CONFORMER;
*etab = *openbabelc::etab;
*ttab = *openbabelc::ttab;
*isotab = *openbabelc::isotab;
*chainsparser = *openbabelc::chainsparser;
*BUFF_SIZE = *openbabelc::BUFF_SIZE;
1;
